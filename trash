void pipeMachine(char **command[])
{
    /* Implement pipe functionality here */
   /* More than one command so we need to redirect some output to another process */
            int pipefd[2];
            int pid;
            char buffer[1024];
            pipe(pipefd);
            
            switch (pid=fork())
            {
            case -1: perror("fork in execute_command pipe section");
                exit(1);
            case 0: /* We are in child process */
            close(pipefd[0]); /* Close read-end of pipe */
            FILE *out = fdopen(pipefd[1],"w"); /* Open pipe as stream for writing */
            dup2(pipefd[1], 1);  // send stdout to the pipe
            dup2(pipefd[1], 2);  // send stderr to the pipe
            close(pipefd[1]);    // this descriptor is no longer needed
            execvp(command[0][0],command[0]);
            break;
            
            default:
            close(pipefd[1]); /* Close writing end of pipe */
            FILE *in = fdopen(pipefd[0],"r"); /* Open pipe as stream for reading */
            fscanf(in, "%s",buffer); /* Write to stream from pipe */
            printf (" Hello parent (pid:%d) received %s\n",(int)getpid(), buffer);
            strcat(command[1][0],buffer);
            int pid = fork();
            if(pid==0){
            execvp(command[1][0],command[1]);
            } else if(pid>0){
                wait(0);
            } else if(pid==-1){
                printf("Something failed when trying to create new process  @ line 199");
            }
                break;
            }
        }